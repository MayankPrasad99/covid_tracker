{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","borderColor","fill","barChart","label","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","covidImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.004f36f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__J2Eh5\",\"card\":\"Cards_card__2XNi1\",\"infected\":\"Cards_infected__3I38i\",\"recovered\":\"Cards_recovered__16XR-\",\"deaths\":\"Cards_deaths__3Rw-F\"};","import React from 'react';\r\nimport styles from './Cards.module.css';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nconst Cards = ({data : {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed) {\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n        <div className = {styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start = {0} end = {confirmed.value} duration = {2.5} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No. of Active Cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start = {0} end = {recovered.value} duration = {2.5} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No. of Recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start = {0} end = {deaths.value} duration = {2.5} separator = \",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No. of Deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableURL = url;\r\n    if(country) {\r\n        changeableURL = `${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const {data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\r\n        return  { confirmed, recovered, deaths, lastUpdate };\r\n    } catch(error) {  \r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ({ data : { confirmed, deaths, recovered }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line \r\n                    data = {{\r\n                        labels : dailyData.map(({date}) => date),\r\n                        datasets : [{\r\n                            data: dailyData.map(({confirmed}) => confirmed),\r\n                            labels: 'Infected',\r\n                            borderColor: '#3333ff',\r\n                            fill: true,\r\n                        },{\r\n                            data: dailyData.map(({deaths}) => deaths),\r\n                            labels: 'Deaths',\r\n                            borderColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true,\r\n                        }],\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar \r\n                data = {{\r\n                    labels: ['Infected','Recovered','Deaths'],\r\n                    datasets: [{\r\n                        label: 'people',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5',\r\n                            'rgba(0, 255, 0, 0.5',\r\n                            'rgba(255, 0, 0, 0.5',\r\n                        ],\r\n                        data: [confirmed.value,recovered.value,deaths.value],\r\n                    }]\r\n                }}\r\n                options = {{\r\n                    legend: {display: false},\r\n                    title: {display: true, text: `Current State in ${country}`},\r\n\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className = {styles.container}>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} >\r\n                <option value=\"\">Global</option>                \r\n                {fetchedCountries.map((country, i) => <option key ={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Chart, Cards, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport covidImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n    async componentDidMount () {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data : fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data : fetchedData, country: country});\r\n    }\r\n \r\n    render() {\r\n        const { data, country } = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={covidImage} alt=\"COVID-19\" />\r\n                <Cards data = { data } />\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n                <Chart data = { data } country = { country } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3dM2M\",\"image\":\"App_image__qedGE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__GRwpp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__389OU\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}